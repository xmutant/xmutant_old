import style from "./CaptureSettings.module.scss";
import colors from "../../styles/Colors.module.css";
import cs from "classnames";

import { Select } from "./Select";
import Link from "next/link";
import { SliderWithText } from "./SliderWithText";
import { Spacing } from "../Layout/Spacing";
import { InputResolution } from "./Resolution";
import { InputText } from "./InputText";
import { Checkbox } from "./Checkbox";

const modeOptions = [
  {
    value: "VIEWPORT",
    label: "Viewport capture",
  },
  {
    value: "VIEWPORT",
    // value: "VIEWPORT",
    label: "From <canvas> (coming soon)",
  },
];

const triggerModeOptions = [
  {
    value: "DELAY",
    label: "Fixed delay",
  },
  {
    // value: "FN_TRIGGER",
    value: "DELAY",
    label: "Programmatic trigger using xmpreview() (Coming soon)",
  },
];

function getModeDescription(mode) {
  switch (mode) {
    case "CANVAS":
      return "The preview will be generated by using canvas.toDataURL() on the canvas selected with the CSS selector you provide";
    // case "CUSTOM":
    //   return "You are responsible for providing the image preview by implementing a function (see guide)"
    case "VIEWPORT":
      return "The preview will be generated by capturing the full viewport at the resolution you provide";
  }
}

export const InputCaptureSettings = ({ settings, onChange }) => {
  const update = (key, value) => {
    onChange({
      ...settings,
      [key]: value,
    });
  };

  return (
    <div className={cs(style.container)}>
      <h5>Trigger</h5>
      <p>When will the capture module trigger ?</p>
      <Select
        id="trigger-mode"
        placeholder="Select the type of trigger"
        value={settings.triggerMode ?? ""}
        options={triggerModeOptions}
        onChange={(value) => update("triggerMode", value)}
        className={cs(style.select)}
      />
      {settings.triggerMode === "DELAY" && (
        <>
          <Spacing size="large" />
          <h5>Time before capture is taken</h5>
          <p>Remember: better safe than sorry</p>
          <SliderWithText
            min={0.1}
            max={300}
            step={0.1}
            value={settings.delay / 1000}
            onChange={(val) => update("delay", val * 1000)}
          />
        </>
      )}

      <Spacing size="x-large" />

      <h5>Target</h5>
      <p>
        <span>What will be the target of the capture module ?</span>
      </p>
      <Select
        id="mode"
        placeholder="Select capture mode"
        value={!settings.mode ? "" : settings.mode}
        options={modeOptions}
        onChange={(value) => update("mode", value)}
        className={cs(style.select)}
      />
      {settings.mode && <em>{getModeDescription(settings.mode)}</em>}

      {settings.mode === "VIEWPORT" && (
        <>
          <Spacing size="large" />

          <h5>Capture resolution</h5>
          <p>
            A browser with this resolution will be spawned to take a fullscreen
            capture. [256; 2048]
          </p>
          <InputResolution
            value={{ x: settings.resX, y: settings.resY }}
            onChange={(val) => {
              onChange({
                ...settings,
                resX: val.x,
                resY: val.y,
              });
            }}
            min={256}
            max={2048}
            className={cs(style.resolution)}
          />
        </>
      )}

      {settings.mode === "CANVAS" && (
        <>
          <Spacing size="large" />
          <h5>Canvas CSS selector</h5>
          <p>
            A CSS selector that targets the canvas on which your graphics are
            rendered
          </p>
          <InputText
            placeholder="canvas#my-canvas"
            value={settings.canvasSelector || ""}
            onChange={(val) => update("canvasSelector", val.target.value)}
          />
        </>
      )}

      <Spacing size="3x-large" />

      <h5>Extra settings</h5>

      <p>
        <span>Only use if your project meets </span>
        <Link href="/doc/artist/project-settings#environment">
          certain criteria
        </Link>
      </p>

      <Checkbox
        value={settings.gpu || false}
        onChange={(val) => update("gpu", val)}
        paddingLeft={false}
      >
        GPU-enabled render instances
      </Checkbox>

      {settings.gpu && (
        <em>
          GPU instances can take up to 3 minutes to bootstrap, please be patient
        </em>
      )}
    </div>
  );
};
